monitoring:
  namespaceOverride: "prometheus"
  defaultRules:
    create: true
    rules:
      alertmanager: true
      etcd: true
      configReloaders: true
      general: true
      k8s: true
      kubeApiserver: true
      kubeApiserverAvailability: true
      kubeApiserverSlos: true
      kubelet: true
      kubeProxy: false
      kubePrometheusGeneral: true
      kubePrometheusNodeRecording: true
      kubernetesApps: true
      kubernetesResources: true
      kubernetesStorage: true
      kubernetesSystem: true
      kubeScheduler: false
      kubeStateMetrics: true
      network: true
      node: true
      nodeExporterAlerting: true
      nodeExporterRecording: true
      prometheus: true
      prometheusOperator: true
  
  global:
    rbac:
      create: true

  ## Configuration for alertmanager
  ## ref: https://prometheus.io/docs/alerting/alertmanager/
  ##
  alertmanager:
    ingress:
      enabled: true
      ingressClassName: "traefik"
      annotations:
        traefik.ingress.kubernetes.io/router.middlewares: traefik-secure@kubernetescrd
        traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        traefik.ingress.kubernetes.io/router.tls: "true"
        traefik.ingress.kubernetes.io/router.tls.certresolver: "cf-production"
      hosts: 
        - alertmanager.interpolar.ch

  ## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
  ## grafana.serviceMonitor.enabled
  grafana:
    enabled: true
    namespaceOverride: ""

    ## Timezone for the default dashboards
    ## Other options are: browser or a specific timezone, i.e. Europe/Luxembourg
    ##
    defaultDashboardsTimezone: Europe/Zurich

    rbac:
      ## If true, Grafana PSPs will be created
      ##
      pspEnabled: false
    admin:
      existingSecret: "prometheus-grafana"
    ingress:
      enabled: true
      ingressClassName: "traefik"
      annotations:
        # kubernetes.io/ingress.class: traefik
        traefik.ingress.kubernetes.io/router.middlewares: traefik-secure@kubernetescrd
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        traefik.ingress.kubernetes.io/router.tls.certresolver: "cf-production"
      hosts: 
        - grafana.interpolar.ch
  prometheus:
    ingress:
      enabled: true
      ingressClassName: "traefik"
      annotations:
        # kubernetes.io/ingress.class: traefik
        traefik.ingress.kubernetes.io/router.middlewares: traefik-secure@kubernetescrd
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        traefik.ingress.kubernetes.io/router.tls.certresolver: "cf-production"
      hosts: 
        - prometheus.interpolar.ch
  alertmanagerSpec:
    externalUrl: https://alertmanager.interpolar.ch/
    ## Example which selects all namespaces with label "alertmanagerconfig" set to "enabled"
    alertmanagerConfigNamespaceSelector:
      matchLabels:
        monitoring: enabled
  prometheusSpec:
    ## How long to retain metrics
    externalUrl: https://prometheus.interpolar.ch/
    retention: 365d
    retentionSize: 45GB
    resources:
      limits:
        cpu: 250m
        memory: 1000Mi
      requests:
        cpu: 250m
        memory: 1000Mi
    # storageSpec:
    #   volumeClaimTemplate:
    #     spec:
    #       storageClassName: 
    #       accessModes: ["ReadWriteOnce"]
    #       resources:
    #         requests:
    #           storage: 50Gi
    
    ## If true, a nil or {} value for prometheus.prometheusSpec.serviceMonitorSelector will cause the
    ## prometheus resource to be created with selectors based on values in the helm deployment,
    ## which will also match the servicemonitors created
    ##
    serviceMonitorSelectorNilUsesHelmValues: false

    ## ServiceMonitors to be selected for target discovery.
    ## If {}, select all ServiceMonitors
    ##
    serviceMonitorSelector: {}
    ## Example which selects ServiceMonitors with label "prometheus" set to "somelabel"
    # serviceMonitorSelector:
    #   matchLabels:
    #     prometheus: somelabel

    ## Namespaces to be selected for ServiceMonitor discovery.
    ##
    # serviceMonitorNamespaceSelector: {}
    ## Example which selects ServiceMonitors in namespaces with label "prometheus" set to "somelabel"
    # serviceMonitorNamespaceSelector:
    #   matchLabels:
    #     prometheus: somelabel
    serviceMonitorNamespaceSelector:
      matchLabels:
        monitoring: enabled